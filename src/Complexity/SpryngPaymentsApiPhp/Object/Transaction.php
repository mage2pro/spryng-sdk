<?php

/**
 * @license         Berkeley Software Distribution License (BSD-License 2) http://www.opensource.org/licenses/bsd-license.php
 * @author          Roemer Bakker
 * @copyright       Complexity Software
 */

namespace SpryngPaymentsApiPhp\Object;

/**
 * Class Spryng_Payments_Api_Object_Transaction
 * @package SpryngPaymentsApiPhp\Object
 */
class Transaction
{
    /**
     * Transaction reference available for traceability and reconciliation. Gateway generated value.
     *
     * @var string
     */
    public $_id;

    /**
     * The account on which the transaction was created.
     *
     * @var string
     */
    public $account;

    /**
     * Amount is charged without a decimal place e.g. $1.5 = 150. Currencies can have different decimals/exponentials,
     * see Currencies Section for more details.
     *
     * @var integer
     */
    public $amount;

    /**
     * Indicates if the transaction is blocked or not.
     *
     * @var boolean
     */
    public $blocked;

    /**
     * Acquirer reference number. An ID that is generated by the Acquirer at the time of clearing. Is empty if the
     * transaction is not yet cleared.
     *
     * @var
     */
    public $arn;

    /**
     * Code provided after card transaction is authorized.
     *
     * @var string
     */
    public $authorization_code;

    /**
     * Address verification services for UK, US and Canada.
     *
     * @var string
     */
    public $avs_result;

    /**
     * The corresponding Card object.
     *
     * @var Card
     */
    public $card;

    /**
     * The corresponding Cardholder Authentication Verification Value.
     *
     * @var string
     */
    public $cavv2;

    /**
     * Two-letter ISO country code representing the country from where the transaction was initiated.
     *
     * @var string
     */
    public $country_code;

    /**
     * The city to which the customer_ip resolves
     *
     * @var string
     */
    public $city;

    /**
     * Defined by gateway upon creation of the transaction. Does not include timezone.
     *
     * @var \DateTime
     */
    public $created_at;

    /**
     * The corresponding Customer object, if available
     *
     * @var Customer
     */
    public $customer;

    /**
     * The IP adress from which the transaction was submitted.
     *
     * @var string
     */
    public $customer_ip;

    /**
     * Indicates if the CVV2 was supplied in the card transaction.
     *
     * @var boolean
     */
    public $cvv_present;

    /**
     * Validation response for the CVV_CVC.
     *
     * @var string
     */
    public $cvv_response;

    /**
     * @var string
     */
    public $cvv_result;

    /**
     * The details of the transaction.
     *
     * @var array
     */
    public $details;

    /**
     * If available and enabled, the descriptor will appear on the customers statement. Your company name is prepended
     * to this string. It must be an alphanumeric ascii-formatted string with a maximum of 13 characters.
     *
     * @var string
     */
    public $dynamic_descriptor;

    /**
     * Electronic Commerce Indicator.
     *
     * @var string
     */
    public $eci_code;

    /**
     * A boolean that indicates if the transaction was fraudulent
     *
     * @var boolean
     */
    public $fraud;

    /**
     * An array of longitude and latitude providing location from which the transaction was initiated by the customer.
     *
     * @var array
     */
    public $geo_location;

    /**
     * The fixed amount component to interchange. Cannot be specified by the user.
     *
     * @var float
     */
    public $interchange_fixed;

    /**
     * The relative amount component to interchange. Cannot be specified by the user.
     *
     * @var float
     */
    public $interchange_percentage;

    /**
     * The date and time of the last status update
     *
     * @var \DateTime
     */
    public $last_status_update;

    /**
     * A metadata field available for storing additional information in the transaction object.
     *
     * @var string
     */
    public $merchant_reference;

    /**
     * @var string
     */
    public $merchant_webhook_url;

    /**
     * The name of the payment product used. For example: iDeal, card, etc.
     *
     * @var Payment_Product
     */
    public $payment_product;

    /**
     * The type of the payment product used. For example: Visa, Mastercard, etc.
     *
     * @var Payment_Product
     */
    public $payment_product_type;

    /**
     * Point of Sale entry mode.
     *
     * @var string
     */
    public $pos_entry_mode_id;

    /**
     * Point of Sale device id.
     *
     * @var string
     */
    public $pos_device_id;

    /**
     * A string indicating the processing
     *
     * @var string
     */
    public $processor;

    /**
     * Determines whether this transaction is part of a subscription
     *
     * @var boolean
     */
    public $recurring;

    /**
     * @var string
     */
    public $rrn;

    /**
     * @var object
     */
    public $risk_score;

    /**
     * States whatever a card has been 3D-enrolled by the card issuer.
     *
     * @var boolean
     */
    public $threed_enrolled;

    /**
     * Indicades if cardholder authentication was successful.
     *
     * @var boolean
     */
    public $threed_authenticated;

    /**
     * System Trace Audit Number.
     *
     * @var integer
     */
    public $stan;

    /**
     * The current state of the transaction. Can be one of 'AUTHORIZED', 'SENT_FOR_SETTLEMENT', 'SETTLED', 'FAILED',
     * 'GATEWAY_REJECTED', 'PROCESSOR_DECLINED', 'AUTHORIZATION_EXPIRED', 'VOIDED' or ‘EXPIRED’.
     *
     * @var string
     */
    public $status;

    /**
     * The IP of the server making the transaction
     *
     * @var string
     */
    public $submitter_ip;

    /**
     * A UTC timestamp showing last time the transaction was updated
     *
     * @var \DateTime
     */
    public $updated_at;

    /**
     * An RFC 7231 User agent string. This is used to identify the device which initiated the transaction.
     *
     * @var string
     */
    public $user_agent;
}